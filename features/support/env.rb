require 'rubygems'
require 'fileutils'

# IMPORTANT: This file is generated by cucumber-rails - edit at your own peril.
# It is recommended to regenerate this file in the future when you upgrade to a
# newer version of cucumber-rails. Consider adding your own code to a new file
# instead of editing this one. Cucumber will automatically load all features/**/*.rb
# files.

require 'cucumber/rails'

require 'database_cleaner'
DatabaseCleaner.strategy = :truncation

# Capybara defaults to XPath selectors rather than Webrat's default of CSS3. In
# order to ease the transition to Capybara we set the default here. If you'd
# prefer to use XPath just remove this line and adjust any selectors in your
# steps to use the XPath syntax.
Capybara.default_selector = :css

# By default, any exception happening in your Rails application will bubble up
# to Cucumber so that your scenario will fail. This is a different from how
# your application behaves in the production environment, where an error page will
# be rendered instead.
#
# Sometimes we want to override this default behaviour and allow Rails to rescue
# exceptions and display an error page (just like when the app is running in production).
# Typical scenarios where you want to do this is when you test your error pages.
# There are two ways to allow Rails to rescue exceptions:
#
# 1) Tag your scenario (or feature) with @allow-rescue
#
# 2) Set the value below to true. Beware that doing this globally is not
# recommended as it will mask a lot of errors for you!
#
ActionController::Base.allow_rescue = false

##################################################################################

Capybara.configure do |config|
  config.server = :puma
  config.default_max_wait_time = 15
end

##################################################################################

require 'selenium/webdriver'

ACCEPTED_FIREFOX_ENV_PATHS = ['FIREFOX_ESR_78_PATH']

def accepted_firefox_path 
  ENV[ ACCEPTED_FIREFOX_ENV_PATHS.detect do |env_path|
    ENV[env_path].present?
  end || ""].tap { |path|
    path.presence or raise "no accepted FIREFOX found"
  }
end

Selenium::WebDriver::Firefox.path = accepted_firefox_path

Capybara.register_driver :firefox do |app|
  # capabilities = Selenium::WebDriver::Remote::Capabilities.firefox(
  #   # TODO: trust the cert used in container and remove this:
  #   acceptInsecureCerts: true
  # )

  profile = Selenium::WebDriver::Firefox::Profile.new

  opts = Selenium::WebDriver::Firefox::Options.new(binary: accepted_firefox_path,
                                                   profile: profile,
                                                   log_level: :trace)

  Capybara::Selenium::Driver.new(app, browser: :firefox, options: opts #,
                                 # desired_capabilities: capabilities
                                )
end

##################################################################################

Before('not @rack') do
  Capybara.default_driver = :firefox
  Capybara.current_driver = :firefox

  # due to failing connection to geckodriver on cider
  sleep 2
  page.driver.browser.manage.window.maximize

  # wait_until do
  #   begin
  #     # to prevent Selenium::WebDriver::Error::MoveTargetOutOfBoundsError: Element cannot be scrolled into view
  #     page.driver.browser.manage.window.maximize
  #   rescue => e
  #   end
  #   true
  # end
end

Before do
  Cucumber.logger.info "Current capybara driver: %s\n" % Capybara.current_driver
  Dataset.restore_dump
  visit(root_path)
end

module Capybara::Node::Finders
  # override due to raising an error instead of returning nil
  def first(*args, **options, &optional_filter_block)
    options = { minimum: 0 }.merge(options) unless options_include_minimum?(options)
    all(*args, **options, &optional_filter_block).first
  end
end
