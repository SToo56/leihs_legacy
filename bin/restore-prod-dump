#!/usr/bin/env bash

set -ex

LEGACY_DIR="$(dirname ${BASH_SOURCE})/.."


SPARSE="${SPARSE:-YES}"
if [ $SPARSE == "YES" ] ||  [ $SPARSE == "NO" ]; then
  echo "SPARSE=$SPARSE"
else
  echo 'SPARSE must be unset, or "YES", or "NO"'
  exit 1
fi

source ${LEGACY_DIR}/bin/db-set-env


FILE=${FILE:-tmp/db_production.pgbin}
RAILS_ENV=development
bundle exec rake db:create || true # rails runner crashes if DB is missingâ€¦
# bundle exec rake db:environment:set
# echo "ENTER to continue; abort with CTRL-C"
# read
psql -c "SELECT pg_terminate_backend(pg_stat_activity.pid) FROM pg_stat_activity WHERE pg_stat_activity.datname = '$PGDATABASE' AND pid <> pg_backend_pid();"
psql -c "DROP DATABASE IF EXISTS $PGDATABASE"
psql -c "CREATE DATABASE $PGDATABASE"

# this is required to restore dumps from PG <= 10 into PG >= 11
{ pg_restore --version | grep -q '11.' ;} && psql -d $PGDATABASE -c "DROP SCHEMA IF EXISTS \"public\";"

pg_restore --disable-triggers -j $J -x -O -d $PGDATABASE --schema-only $FILE

if [ $SPARSE == "YES" ]; then
  pg_restore --disable-triggers -j $J -x -O -d $PGDATABASE --data-only \
    -L <(pg_restore -l ${FILE} | grep -v -E -e 'attachments|audited|audits') $FILE
else
  pg_restore --disable-triggers -j $J -x -O -d $PGDATABASE --data-only $FILE
fi

bundle exec rake db:migrate
psql -d $PGDATABASE -c "UPDATE system_and_security_settings SET external_base_url = 'http://localhost:3200'"
psql -d $PGDATABASE -c "UPDATE system_and_security_settings SET sessions_force_secure = FALSE"

${LEGACY_DIR}/bin/db-copy-create
